set -e
# Correct ME
exeName=""
# separated by space or newline,quote item if item including space
declare -a runtimeFiles=(
)
# FIX ME
# example: main.GitHash or packageName/path/to/hello.GitHash
gitHashPath=
# FIX ME
# example: main.BuildTime or packageName/path/to/hello.BuildTime
buildTimePath=
# FIX ME
# example: main.BuildMachine or packageName/path/to/hello.BuildMachine
buildMachinePath=

# Correct ME
mainFile=main.go

_build(){
    local os=${1:?'missing GOOS'}
    local arch=${2:?'missing GOARCH'}
    if [ -z ${exeName} ];then
        echo "${RED}Error: exeName not set!${NORMAL}"
        exit 1
    fi
    local resultDir="${exeName}-${os}-${arch}"

    if [ ${#runtimeFiles} -eq 0 ];then
        echo "${YELLOW}Warning: runtimeFiles is empty!${NORMAL}"
    fi

    if [ ! -d ${resultDir} ];then
        mkdir -p ${resultDir}/bin
    fi

    ldflags="-w -s"
    if [ -n "${gitHashPath}" ];then
        local gitHash="$(git rev-parse HEAD)"
        ldflags="${ldflags} -X ${gitHashPath}=${gitHash}"
    else
        echo "${YELLOW}Warning: gitHashPath is not set${NORMAL}"
    fi

    if [ -n "${buildTimePath}" ];then
        local buildTime="$(date +%FT%T)"
        ldflags="${ldflags} -X ${buildTimePath}=${buildTime}"
    else
        echo "${YELLOW}Warning: buildTimePath is not set${NORMAL}"
    fi

    if [ -n "${buildMachinePath}" ];then
        local buildMachine="$(uname -s)-$(uname -m)"
        ldflags="${ldflags} -X ${buildMachinePath}=${buildMachine}"
    else
        echo "${YELLOW}Warning: buildMachinePath is not set${NORMAL}"
    fi

    echo "${GREEN}Build ${exeName} to ${resultDir}...${NORMAL}"
    GOOS=${os} GOARCH=${arch} go build -o ${resultDir}/bin/${exeName} -ldflags "${ldflags}" ${mainFile} && { echo "${GREEN}Build successfully.${NORMAL}"; } || { echo "${RED}Build failed${NORMAL}"; /bin/rm -rf "${resultDir}"; exit 1; }
    for f in "${runtimeFiles[@]}";do
        cp $f ${resultDir}
    done
}

build(){
    _build darwin amd64
    _build linux amd64
    _build linux arm64
}

_pack(){
    local os=${1:?'missing GOOS'}
    local arch=${2:?'missing GOARCH'}
    local resultDir="${exeName}-${os}-${arch}"

    _build $os $arch
    tar -jcvf ${resultDir}.tar.bz2 ${resultDir}
    /bin/rm -rf ${resultDir}
}

pack(){
    _pack darwin amd64
    _pack linux amd64
    _pack linux arm64
}

