#!/bin/bash
rpath="$(readlink ${BASH_SOURCE})"
if [ -z "$rpath" ];then
    rpath=${BASH_SOURCE}
fi
pwd=${PWD}
this="$(cd $(dirname $rpath) && pwd)"
# cd "$this"
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

user="${SUDO_USER:-$(whoami)}"
home="$(eval echo ~$user)"

# export TERM=xterm-256color

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
  ncolors=$(tput colors 2>/dev/null)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
            CYAN="$(tput setaf 5)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
            CYAN=""
    BLUE=""
    BOLD=""
    NORMAL=""
fi
_err(){
    echo "$*" >&2
}

_runAsRoot(){
    cmd="${*}"
    local rootID=0
    if [ "${EUID}" -ne "${rootID}" ];then
        echo -n "Not root, try to run as root.."
        # or sudo sh -c ${cmd} ?
        if eval "sudo ${cmd}";then
            echo "ok"
            return 0
        else
            echo "failed"
            return 1
        fi
    else
        # or sh -c ${cmd} ?
        eval "${cmd}"
    fi
}

rootID=0
function _root(){
    if [ ${EUID} -ne ${rootID} ];then
        echo "Need run as root!"
        exit 1
    fi
}

ed=vi
if command -v vim >/dev/null 2>&1;then
    ed=vim
fi
if command -v nvim >/dev/null 2>&1;then
    ed=nvim
fi
if [ -n "${editor}" ];then
    ed=${editor}
fi
###############################################################################
# write your code below (just define function[s])
# function is hidden when begin with '_'
###############################################################################
set -e
exeName=fetcher
runtimeFiles=""
_build(){
    local os=${1:?'missing GOOS'}
    local arch=${2:?'missing GOARCH'}
    local resultDir="${exeName}-${os}-${arch}"
    # FIX ME
    local gitHashPath="fetcher/cmd.GitHash"
    # FIX ME
    local buildTimePath=
    # FIX ME
    local buildMachinePath=
    if [ ! -d ${resultDir} ];then
        mkdir -p ${resultDir}
    fi

    gitHash="$(git rev-parse HEAD)"
    buildTime="$(date +%FT%T)"
    buildMachine="$(uname -s)-$(uname -m)"
    ldflags="-w -s -X ${gitHashPath}=${gitHash} -X ${buildTimePath}=${buildTime} -X ${buildMachinePath}=${buildMachine}"
    echo "Build location: ${resultDir}..."
    GOOS=${os} GOARCH=${arch} go build -o ${resultDir}/${exeName} -ldflags "${ldflags}" main.go
    for f in ${runtimeFiles};do
        cp $f ${resultDir}
    done
}

build(){
    _build linux amd64
    _build linux arm64
}

_pack(){
    local os=${1:?'missing GOOS'}
    local arch=${2:?'missing GOARCH'}
    local resultDir="${exeName}-${os}-${arch}"

    _build $os $arch
    tar -jcvf ${resultDir}.tar.bz2 ${resultDir}
    /bin/rm -rf ${resultDir}
}

pack(){
    _pack linux amd64
    _pack linux arm64
}

em(){
    $ed $0
}

###############################################################################
# write your code above
###############################################################################
function _help(){
    cd ${this}
    cat<<EOF2
Usage: $(basename $0) ${bold}CMD${reset}

${bold}CMD${reset}:
EOF2
    perl -lne 'print "\t$2" if /^\s*(function)?\s*(\S+)\s*\(\)\s*\{$/' $(basename ${BASH_SOURCE}) | perl -lne "print if /^\t[^_]/"
}


case "$1" in
     ""|-h|--help|help)
        _help
        ;;
    *)
        "$@"
esac
